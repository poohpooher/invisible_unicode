use std::fs::File;
use std::io::Write;
use std::path::Path;
use indented_text_writer::IndentedTextWriter;

pub struct Generator {
    invisibilities: Vec<char>,
}

impl Generator {
    pub fn new() -> Self {
        Self {
            invisibilities: vec![]
        }
    }

    pub fn add_invisibilities(&mut self, invisibilities: Vec<char>) {
        self.invisibilities.extend(invisibilities);
    }

    pub fn generate(&mut self, file_path: &Path) -> Result<(), anyhow::Error> {
        let mut writer = IndentedTextWriter::new("  ", 1024, '{', '}', true);

        writer.write_line("#![allow(text_direction_codepoint_in_literal)]");
        writer.write_line("// generated by code_gen");
        // writer.write_line("pub const INVISIBILITIES: &'static [&'static str] = &[");
        // for invisibility in self.invisibilities.iter() {
        //     writer.write_line(format!("r#\"{}\"#, // {}", invisibility, invisibility.escape_unicode()));
        // }
        // writer.write_line("];");

        writer.write_line("pub const INVISIBILITIES: &'static [char] = &[");
        for invisibility in self.invisibilities.iter() {
            writer.write_line(format!("'{}',", invisibility.escape_unicode()));
        }
        writer.write_line("];");

        let str = writer.string()?;
        let bytes = str.as_bytes();

        // 파일 생성
        if !file_path.exists() {
            File::create(file_path)?;
        }

        let mut file = File::options().write(true).truncate(true).open(file_path)?;
        file.write_all(bytes)?;

        Ok(())
    }
}